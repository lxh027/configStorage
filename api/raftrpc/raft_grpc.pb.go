// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package raftrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RaftClient is the client API for Raft service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaftClient interface {
	// candidate request vote rpc
	RequestVote(ctx context.Context, in *RequestVoteArgs, opts ...grpc.CallOption) (*RequestVoteReply, error)
	// leader append entries && heartbeat rpc
	AppendEntries(ctx context.Context, in *AppendEntriesArgs, opts ...grpc.CallOption) (*AppendEntriesReply, error)
}

type raftClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftClient(cc grpc.ClientConnInterface) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) RequestVote(ctx context.Context, in *RequestVoteArgs, opts ...grpc.CallOption) (*RequestVoteReply, error) {
	out := new(RequestVoteReply)
	err := c.cc.Invoke(ctx, "/raft/RequestVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) AppendEntries(ctx context.Context, in *AppendEntriesArgs, opts ...grpc.CallOption) (*AppendEntriesReply, error) {
	out := new(AppendEntriesReply)
	err := c.cc.Invoke(ctx, "/raft/AppendEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftServer is the server API for Raft service.
// All implementations must embed UnimplementedRaftServer
// for forward compatibility
type RaftServer interface {
	// candidate request vote rpc
	RequestVote(context.Context, *RequestVoteArgs) (*RequestVoteReply, error)
	// leader append entries && heartbeat rpc
	AppendEntries(context.Context, *AppendEntriesArgs) (*AppendEntriesReply, error)
	mustEmbedUnimplementedRaftServer()
}

// UnimplementedRaftServer must be embedded to have forward compatible implementations.
type UnimplementedRaftServer struct {
}

func (UnimplementedRaftServer) RequestVote(context.Context, *RequestVoteArgs) (*RequestVoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVote not implemented")
}
func (UnimplementedRaftServer) AppendEntries(context.Context, *AppendEntriesArgs) (*AppendEntriesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntries not implemented")
}
func (UnimplementedRaftServer) mustEmbedUnimplementedRaftServer() {}

// UnsafeRaftServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaftServer will
// result in compilation errors.
type UnsafeRaftServer interface {
	mustEmbedUnimplementedRaftServer()
}

func RegisterRaftServer(s grpc.ServiceRegistrar, srv RaftServer) {
	s.RegisterService(&Raft_ServiceDesc, srv)
}

func _Raft_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).RequestVote(ctx, req.(*RequestVoteArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).AppendEntries(ctx, req.(*AppendEntriesArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// Raft_ServiceDesc is the grpc.ServiceDesc for Raft service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Raft_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestVote",
			Handler:    _Raft_RequestVote_Handler,
		},
		{
			MethodName: "AppendEntries",
			Handler:    _Raft_AppendEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}

// StateClient is the client API for State service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StateClient interface {
	// receive log reply
	NewEntry(ctx context.Context, in *NewEntryArgs, opts ...grpc.CallOption) (*NewEntryReply, error)
	// return key value
	GetValue(ctx context.Context, in *GetValueArgs, opts ...grpc.CallOption) (*GetValueReply, error)
	GetPrefixConfigs(ctx context.Context, in *GetPrefixConfigArgs, opts ...grpc.CallOption) (*GetPrefixConfigReply, error)
	StopServer(ctx context.Context, in *ControllerMsg, opts ...grpc.CallOption) (*ControllerMsg, error)
	StartServer(ctx context.Context, in *ControllerMsg, opts ...grpc.CallOption) (*ControllerMsg, error)
}

type stateClient struct {
	cc grpc.ClientConnInterface
}

func NewStateClient(cc grpc.ClientConnInterface) StateClient {
	return &stateClient{cc}
}

func (c *stateClient) NewEntry(ctx context.Context, in *NewEntryArgs, opts ...grpc.CallOption) (*NewEntryReply, error) {
	out := new(NewEntryReply)
	err := c.cc.Invoke(ctx, "/state/NewEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) GetValue(ctx context.Context, in *GetValueArgs, opts ...grpc.CallOption) (*GetValueReply, error) {
	out := new(GetValueReply)
	err := c.cc.Invoke(ctx, "/state/GetValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) GetPrefixConfigs(ctx context.Context, in *GetPrefixConfigArgs, opts ...grpc.CallOption) (*GetPrefixConfigReply, error) {
	out := new(GetPrefixConfigReply)
	err := c.cc.Invoke(ctx, "/state/GetPrefixConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) StopServer(ctx context.Context, in *ControllerMsg, opts ...grpc.CallOption) (*ControllerMsg, error) {
	out := new(ControllerMsg)
	err := c.cc.Invoke(ctx, "/state/StopServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) StartServer(ctx context.Context, in *ControllerMsg, opts ...grpc.CallOption) (*ControllerMsg, error) {
	out := new(ControllerMsg)
	err := c.cc.Invoke(ctx, "/state/StartServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateServer is the server API for State service.
// All implementations must embed UnimplementedStateServer
// for forward compatibility
type StateServer interface {
	// receive log reply
	NewEntry(context.Context, *NewEntryArgs) (*NewEntryReply, error)
	// return key value
	GetValue(context.Context, *GetValueArgs) (*GetValueReply, error)
	GetPrefixConfigs(context.Context, *GetPrefixConfigArgs) (*GetPrefixConfigReply, error)
	StopServer(context.Context, *ControllerMsg) (*ControllerMsg, error)
	StartServer(context.Context, *ControllerMsg) (*ControllerMsg, error)
	mustEmbedUnimplementedStateServer()
}

// UnimplementedStateServer must be embedded to have forward compatible implementations.
type UnimplementedStateServer struct {
}

func (UnimplementedStateServer) NewEntry(context.Context, *NewEntryArgs) (*NewEntryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewEntry not implemented")
}
func (UnimplementedStateServer) GetValue(context.Context, *GetValueArgs) (*GetValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedStateServer) GetPrefixConfigs(context.Context, *GetPrefixConfigArgs) (*GetPrefixConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrefixConfigs not implemented")
}
func (UnimplementedStateServer) StopServer(context.Context, *ControllerMsg) (*ControllerMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopServer not implemented")
}
func (UnimplementedStateServer) StartServer(context.Context, *ControllerMsg) (*ControllerMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartServer not implemented")
}
func (UnimplementedStateServer) mustEmbedUnimplementedStateServer() {}

// UnsafeStateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StateServer will
// result in compilation errors.
type UnsafeStateServer interface {
	mustEmbedUnimplementedStateServer()
}

func RegisterStateServer(s grpc.ServiceRegistrar, srv StateServer) {
	s.RegisterService(&State_ServiceDesc, srv)
}

func _State_NewEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewEntryArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).NewEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/state/NewEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).NewEntry(ctx, req.(*NewEntryArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValueArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/state/GetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).GetValue(ctx, req.(*GetValueArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_GetPrefixConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrefixConfigArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).GetPrefixConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/state/GetPrefixConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).GetPrefixConfigs(ctx, req.(*GetPrefixConfigArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_StopServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControllerMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).StopServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/state/StopServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).StopServer(ctx, req.(*ControllerMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_StartServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControllerMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).StartServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/state/StartServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).StartServer(ctx, req.(*ControllerMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// State_ServiceDesc is the grpc.ServiceDesc for State service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var State_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "state",
	HandlerType: (*StateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewEntry",
			Handler:    _State_NewEntry_Handler,
		},
		{
			MethodName: "GetValue",
			Handler:    _State_GetValue_Handler,
		},
		{
			MethodName: "GetPrefixConfigs",
			Handler:    _State_GetPrefixConfigs_Handler,
		},
		{
			MethodName: "StopServer",
			Handler:    _State_StopServer_Handler,
		},
		{
			MethodName: "StartServer",
			Handler:    _State_StartServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}
